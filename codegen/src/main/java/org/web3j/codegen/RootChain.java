package org.web3j.codegen;

import io.reactivex.Flowable;
import io.reactivex.Single;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes1;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.crypto.RawTransaction;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.6.0-SNAPSHOT.
 */
public class RootChain extends Contract {
    private static final String BINARY = "";

    public static final String FUNC_CHILDCHAINCONTRACT = "childChainContract";

    public static final String FUNC_ROUNDTYPE = "roundType";

    public static final String FUNC_HEADERBLOCKS = "headerBlocks";

    public static final String FUNC_DEPOSITMANAGER = "depositManager";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_STAKEMANAGER = "stakeManager";

    public static final String FUNC_VOTETYPE = "voteType";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_ISOWNER = "isOwner";

    public static final String FUNC_NETWORKID = "networkId";

    public static final String FUNC_CHILD_BLOCK_INTERVAL = "CHILD_BLOCK_INTERVAL";

    public static final String FUNC_PROOFVALIDATORCONTRACTS = "proofValidatorContracts";

    public static final String FUNC_CHAIN = "chain";

    public static final String FUNC_WITHDRAWMANAGER = "withdrawManager";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_SUBMITHEADERBLOCK = "submitHeaderBlock";

    public static final String FUNC_DELETEEXIT = "deleteExit";

    public static final String FUNC_SETEXITNFTCONTRACT = "setExitNFTContract";

    public static final String FUNC_SETWETHTOKEN = "setWETHToken";

    public static final String FUNC_MAPTOKEN = "mapToken";

    public static final String FUNC_SETCHILDCONTRACT = "setChildContract";

    public static final String FUNC_ADDPROOFVALIDATOR = "addProofValidator";

    public static final String FUNC_REMOVEPROOFVALIDATOR = "removeProofValidator";

    public static final String FUNC_CURRENTCHILDBLOCK = "currentChildBlock";

    public static final String FUNC_CURRENTHEADERBLOCK = "currentHeaderBlock";

    public static final String FUNC_HEADERBLOCK = "headerBlock";

    public static final String FUNC_DEPOSITBLOCK = "depositBlock";

    public static final String FUNC_SETSTAKEMANAGER = "setStakeManager";

    public static final String FUNC_SETDEPOSITMANAGER = "setDepositManager";

    public static final String FUNC_SETWITHDRAWMANAGER = "setWithdrawManager";

    public static final String FUNC_DEPOSITETHERS = "depositEthers";

    public static final String FUNC_DEPOSITERC721 = "depositERC721";

    public static final String FUNC_ONERC721RECEIVED = "onERC721Received";

    public static final String FUNC_DEPOSIT = "deposit";

    public static final String FUNC_TRANSFERAMOUNT = "transferAmount";

    public static final String FUNC_TOKENFALLBACK = "tokenFallback";

    public static final String FUNC_FINALIZECOMMIT = "finalizeCommit";

    public static final String FUNC_SLASH = "slash";

    public static final Event CHILDCHAINCHANGED_EVENT = new Event("ChildChainChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event PROOFVALIDATORADDED_EVENT = new Event("ProofValidatorAdded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event PROOFVALIDATORREMOVED_EVENT = new Event("ProofValidatorRemoved", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event NEWHEADERBLOCK_EVENT = new Event("NewHeaderBlock", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bytes32>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
    }

    @Deprecated
    protected RootChain(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected RootChain(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected RootChain(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected RootChain(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<String> childChainContract() {
        final Function function = new Function(FUNC_CHILDCHAINCONTRACT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<byte[]> roundType() {
        final Function function = new Function(FUNC_ROUNDTYPE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<Tuple5<byte[], BigInteger, BigInteger, BigInteger, String>> headerBlocks(BigInteger param0) {
        final Function function = new Function(FUNC_HEADERBLOCKS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}));
        return new RemoteFunctionCall<Tuple5<byte[], BigInteger, BigInteger, BigInteger, String>>(function,
                new Callable<Tuple5<byte[], BigInteger, BigInteger, BigInteger, String>>() {
                    @Override
                    public Tuple5<byte[], BigInteger, BigInteger, BigInteger, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<byte[], BigInteger, BigInteger, BigInteger, String>(
                                (byte[]) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (String) results.get(4).getValue());
                    }
                });
    }

    public RemoteFunctionCall<String> depositManager() {
        final Function function = new Function(FUNC_DEPOSITMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public Single<RawTransaction> renounceOwnership() {
        final Function function = new Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createRawTransaction(function);
    }

    public RemoteFunctionCall<String> stakeManager() {
        final Function function = new Function(FUNC_STAKEMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<byte[]> voteType() {
        final Function function = new Function(FUNC_VOTETYPE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes1>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> isOwner() {
        final Function function = new Function(FUNC_ISOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<byte[]> networkId() {
        final Function function = new Function(FUNC_NETWORKID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<BigInteger> CHILD_BLOCK_INTERVAL() {
        final Function function = new Function(FUNC_CHILD_BLOCK_INTERVAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Boolean> proofValidatorContracts(String param0) {
        final Function function = new Function(FUNC_PROOFVALIDATORCONTRACTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<byte[]> chain() {
        final Function function = new Function(FUNC_CHAIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<String> withdrawManager() {
        final Function function = new Function(FUNC_WITHDRAWMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public Single<RawTransaction> transferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return createRawTransaction(function);
    }

    public List<ChildChainChangedEventResponse> getChildChainChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CHILDCHAINCHANGED_EVENT, transactionReceipt);
        ArrayList<ChildChainChangedEventResponse> responses = new ArrayList<ChildChainChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ChildChainChangedEventResponse typedResponse = new ChildChainChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousChildChain = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newChildChain = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ChildChainChangedEventResponse> childChainChangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ChildChainChangedEventResponse>() {
            @Override
            public ChildChainChangedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CHILDCHAINCHANGED_EVENT, log);
                ChildChainChangedEventResponse typedResponse = new ChildChainChangedEventResponse();
                typedResponse.log = log;
                typedResponse.previousChildChain = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newChildChain = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ChildChainChangedEventResponse> childChainChangedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CHILDCHAINCHANGED_EVENT));
        return childChainChangedEventFlowable(filter);
    }

    public List<ProofValidatorAddedEventResponse> getProofValidatorAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(PROOFVALIDATORADDED_EVENT, transactionReceipt);
        ArrayList<ProofValidatorAddedEventResponse> responses = new ArrayList<ProofValidatorAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ProofValidatorAddedEventResponse typedResponse = new ProofValidatorAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.validator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ProofValidatorAddedEventResponse> proofValidatorAddedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ProofValidatorAddedEventResponse>() {
            @Override
            public ProofValidatorAddedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(PROOFVALIDATORADDED_EVENT, log);
                ProofValidatorAddedEventResponse typedResponse = new ProofValidatorAddedEventResponse();
                typedResponse.log = log;
                typedResponse.validator = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ProofValidatorAddedEventResponse> proofValidatorAddedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PROOFVALIDATORADDED_EVENT));
        return proofValidatorAddedEventFlowable(filter);
    }

    public List<ProofValidatorRemovedEventResponse> getProofValidatorRemovedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(PROOFVALIDATORREMOVED_EVENT, transactionReceipt);
        ArrayList<ProofValidatorRemovedEventResponse> responses = new ArrayList<ProofValidatorRemovedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ProofValidatorRemovedEventResponse typedResponse = new ProofValidatorRemovedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.validator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ProofValidatorRemovedEventResponse> proofValidatorRemovedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ProofValidatorRemovedEventResponse>() {
            @Override
            public ProofValidatorRemovedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(PROOFVALIDATORREMOVED_EVENT, log);
                ProofValidatorRemovedEventResponse typedResponse = new ProofValidatorRemovedEventResponse();
                typedResponse.log = log;
                typedResponse.validator = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ProofValidatorRemovedEventResponse> proofValidatorRemovedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PROOFVALIDATORREMOVED_EVENT));
        return proofValidatorRemovedEventFlowable(filter);
    }

    public List<NewHeaderBlockEventResponse> getNewHeaderBlockEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWHEADERBLOCK_EVENT, transactionReceipt);
        ArrayList<NewHeaderBlockEventResponse> responses = new ArrayList<NewHeaderBlockEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewHeaderBlockEventResponse typedResponse = new NewHeaderBlockEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.proposer = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.number = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.start = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.end = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.root = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewHeaderBlockEventResponse> newHeaderBlockEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, NewHeaderBlockEventResponse>() {
            @Override
            public NewHeaderBlockEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWHEADERBLOCK_EVENT, log);
                NewHeaderBlockEventResponse typedResponse = new NewHeaderBlockEventResponse();
                typedResponse.log = log;
                typedResponse.proposer = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.number = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.start = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.end = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.root = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<NewHeaderBlockEventResponse> newHeaderBlockEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWHEADERBLOCK_EVENT));
        return newHeaderBlockEventFlowable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public Single<RawTransaction> submitHeaderBlock(byte[] vote, byte[] sigs, byte[] extradata) {
        final Function function = new Function(
                FUNC_SUBMITHEADERBLOCK, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(vote), 
                new org.web3j.abi.datatypes.DynamicBytes(sigs), 
                new org.web3j.abi.datatypes.DynamicBytes(extradata)), 
                Collections.<TypeReference<?>>emptyList());
        return createRawTransaction(function);
    }

    public Single<RawTransaction> deleteExit(BigInteger exitId) {
        final Function function = new Function(
                FUNC_DELETEEXIT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(exitId)), 
                Collections.<TypeReference<?>>emptyList());
        return createRawTransaction(function);
    }

    public Single<RawTransaction> setExitNFTContract(String _nftContract) {
        final Function function = new Function(
                FUNC_SETEXITNFTCONTRACT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_nftContract)), 
                Collections.<TypeReference<?>>emptyList());
        return createRawTransaction(function);
    }

    public Single<RawTransaction> setWETHToken(String _token) {
        final Function function = new Function(
                FUNC_SETWETHTOKEN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_token)), 
                Collections.<TypeReference<?>>emptyList());
        return createRawTransaction(function);
    }

    public Single<RawTransaction> mapToken(String _rootToken, String _childToken, Boolean _isERC721) {
        final Function function = new Function(
                FUNC_MAPTOKEN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_rootToken), 
                new org.web3j.abi.datatypes.Address(_childToken), 
                new org.web3j.abi.datatypes.Bool(_isERC721)), 
                Collections.<TypeReference<?>>emptyList());
        return createRawTransaction(function);
    }

    public Single<RawTransaction> setChildContract(String newChildChain) {
        final Function function = new Function(
                FUNC_SETCHILDCONTRACT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newChildChain)), 
                Collections.<TypeReference<?>>emptyList());
        return createRawTransaction(function);
    }

    public Single<RawTransaction> addProofValidator(String _validator) {
        final Function function = new Function(
                FUNC_ADDPROOFVALIDATOR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_validator)), 
                Collections.<TypeReference<?>>emptyList());
        return createRawTransaction(function);
    }

    public Single<RawTransaction> removeProofValidator(String _validator) {
        final Function function = new Function(
                FUNC_REMOVEPROOFVALIDATOR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_validator)), 
                Collections.<TypeReference<?>>emptyList());
        return createRawTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> currentChildBlock() {
        final Function function = new Function(FUNC_CURRENTCHILDBLOCK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> currentHeaderBlock() {
        final Function function = new Function(FUNC_CURRENTHEADERBLOCK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple4<byte[], BigInteger, BigInteger, BigInteger>> headerBlock(BigInteger _headerNumber) {
        final Function function = new Function(FUNC_HEADERBLOCK, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_headerNumber)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple4<byte[], BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple4<byte[], BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple4<byte[], BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<byte[], BigInteger, BigInteger, BigInteger>(
                                (byte[]) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple5<BigInteger, String, String, BigInteger, BigInteger>> depositBlock(BigInteger _depositCount) {
        final Function function = new Function(FUNC_DEPOSITBLOCK, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_depositCount)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple5<BigInteger, String, String, BigInteger, BigInteger>>(function,
                new Callable<Tuple5<BigInteger, String, String, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple5<BigInteger, String, String, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<BigInteger, String, String, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue());
                    }
                });
    }

    public Single<RawTransaction> setStakeManager(String _stakeManager) {
        final Function function = new Function(
                FUNC_SETSTAKEMANAGER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_stakeManager)), 
                Collections.<TypeReference<?>>emptyList());
        return createRawTransaction(function);
    }

    public Single<RawTransaction> setDepositManager(String _depositManager) {
        final Function function = new Function(
                FUNC_SETDEPOSITMANAGER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_depositManager)), 
                Collections.<TypeReference<?>>emptyList());
        return createRawTransaction(function);
    }

    public Single<RawTransaction> setWithdrawManager(String _withdrawManager) {
        final Function function = new Function(
                FUNC_SETWITHDRAWMANAGER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_withdrawManager)), 
                Collections.<TypeReference<?>>emptyList());
        return createRawTransaction(function);
    }

    public RemoteCall<TransactionReceipt> depositEthers(BigInteger weiValue) {
        final Function function = new Function(
                FUNC_DEPOSITETHERS, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public Single<RawTransaction> depositERC721(String _token, String _user, BigInteger _tokenId) {
        final Function function = new Function(
                FUNC_DEPOSITERC721, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_token), 
                new org.web3j.abi.datatypes.Address(_user), 
                new org.web3j.abi.datatypes.generated.Uint256(_tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return createRawTransaction(function);
    }

    public Single<RawTransaction> onERC721Received(String operator, String from, BigInteger tokenId, byte[] data) {
        final Function function = new Function(
                FUNC_ONERC721RECEIVED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(operator), 
                new org.web3j.abi.datatypes.Address(from), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return createRawTransaction(function);
    }

    public Single<RawTransaction> deposit(String _token, String _user, BigInteger _amount) {
        final Function function = new Function(
                FUNC_DEPOSIT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_token), 
                new org.web3j.abi.datatypes.Address(_user), 
                new org.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return createRawTransaction(function);
    }

    public Single<RawTransaction> transferAmount(String _token, String _user, BigInteger _amount) {
        final Function function = new Function(
                FUNC_TRANSFERAMOUNT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_token), 
                new org.web3j.abi.datatypes.Address(_user), 
                new org.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return createRawTransaction(function);
    }

    public Single<RawTransaction> tokenFallback(String _user, BigInteger _amount, byte[] _data) {
        final Function function = new Function(
                FUNC_TOKENFALLBACK, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_user), 
                new org.web3j.abi.datatypes.generated.Uint256(_amount), 
                new org.web3j.abi.datatypes.DynamicBytes(_data)), 
                Collections.<TypeReference<?>>emptyList());
        return createRawTransaction(function);
    }

    public Single<RawTransaction> finalizeCommit(BigInteger param0) {
        final Function function = new Function(
                FUNC_FINALIZECOMMIT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Collections.<TypeReference<?>>emptyList());
        return createRawTransaction(function);
    }

    public Single<RawTransaction> slash() {
        final Function function = new Function(
                FUNC_SLASH, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createRawTransaction(function);
    }

    @Deprecated
    public static RootChain load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new RootChain(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static RootChain load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new RootChain(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static RootChain load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new RootChain(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static RootChain load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new RootChain(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<RootChain> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(RootChain.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<RootChain> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(RootChain.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<RootChain> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(RootChain.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<RootChain> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(RootChain.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class ChildChainChangedEventResponse extends BaseEventResponse {
        public String previousChildChain;

        public String newChildChain;
    }

    public static class ProofValidatorAddedEventResponse extends BaseEventResponse {
        public String validator;

        public String from;
    }

    public static class ProofValidatorRemovedEventResponse extends BaseEventResponse {
        public String validator;

        public String from;
    }

    public static class NewHeaderBlockEventResponse extends BaseEventResponse {
        public String proposer;

        public BigInteger number;

        public BigInteger start;

        public BigInteger end;

        public byte[] root;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }
}
